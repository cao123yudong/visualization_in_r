mybrowser <- remoteDriver(browserName = "chrome")
mybrowser$open()
endServer()
remDr <- remoteDriver(browserName = "phantomjs")
remDr$open()
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
RSelenium::startServer()
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
startServer(invisible = FALSE, log = FALSE)
trace(startServer, browser
)
startServer(args = c("-port 4455"), log = FALSE, invisible = FALSE)
start
startServer(args = c("-port 4455"), log = FALSE, invisible = FALSE)
remDr$open()
library("RSelenium")
RSelenium::startServer()
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
startServer(args = c("-Dwebdriver.chrome.driver=/Users/Nick/dataProjects/chromedriver.exe")
, log = FALSE, invisible = FALSE)
startServer(args = c("-Dwebdriver.chrome.driver=/Users/Nick/dataProjects/chromedriver.exe"))
library('RSelenium')
checkForServer() # search for and download Selenium Server java binary.  Only need to run once.
startServer() # run Selenium Server binary
remDr <- remoteDriver(browserName="chrome", port=4444) # instantiate remote driver to connect to Selenium Server
remDr$open(silent=T) # open web browser
install.packages("RSelenium")
library("RSelenium")
RSelenium::startServer()
checkForServer()
RSelenium::startServer()
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
54 + 40.14 + 8.28 + 62.87 + 21.06 + 215.11 +
64.82 + 33.34 + 38.44 + 22.63 + 37.97 + 20
comb = 40.14 + 8.28 + 62.87 + 21.06 + 215.11 +
33.34 + 38.44 + 22.63 + 37.97 + 20
comb
54
data = c( 4,   6,   9,   4,   2,  3.5)
labs = c("a", "b", "c", "d", "e", "f")
pie(data, labs)
3.5/4
bar(data, labs)
barplot(data, labs)
?barplot
barplot(data, names.arg = labs)
data = data.frame(
val  = c( 4,   6,   9,   4,   2,  3.5),
labs = c("a", "b", "c", "d", "e", "f")
)
pie(data$val, data$labs)
library(ggplot2)
ggplot(data, aes(x = val, y = labs)) + geom_bar()
library(ggplot2)
installed.packages("ggplot2")
installed.packages("ggplot2")
installed.packages("ggplot2")
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(data, aes(x = val, y = labs)) + geom_bar()
ggplot(data, aes(y = val, x = labs)) + geom_bar()
ggplot(data, aes(y = val, x = labs)) + geom_bar(stat = "identity")
install.packages("tm")
install.packages("SnowballC")
install.packages("wordcloud")
library(tm)
library(SnowballC)
library(wordcloud)
Russell_Geom <- readChar("Russel_Geometry.txt", file.info(Russel_Geometry.txt)$size)
getwd()
setwd("/Users/Nick/Dropbox/vandy/visualization_in_r")
setwd("data/")
Russell_Geom <- readChar("Russel_Geometry.txt", file.info(Russel_Geometry.txt)$size)
Russell_Geom <- readChar("Russell_Geometry.txt", file.info(Russell_Geometry.txt)$size)
Russell_Geom <- readChar("Russell_Geometry.txt", file.info("Russell_Geometry.txt")$size)
text_corpus <- Corpus(Russell_Geom)
?Corpus
text_corpus <- Corpus(VectorSource(Russell_Geom))
text_corpus <- tm_map(text_corpus, removePunctuation)
text_corpus <- tm_map(text_corpus, removeWords, stopwords('english'))
text_corpus <- tm_map(text_corpus, stemDocument)
wordcloud(jeopCorpus, max.words = 100, random.order = FALSE)
wordcloud(text_corpus, max.words = 100, random.order = FALSE)
text_corpus
?Corpus
text_corpus <- tm_map(text_corpus, content_transformer(tolower))
Russell_Geom <- readChar("Russell_Geometry.txt", file.info("Russell_Geometry.txt")$size)
text_corpus <- Corpus(VectorSource(Russell_Geom)) #Generate a corpus
text_corpus <- tm_map(text_corpus, content_transformer(tolower))
text_corpus <- tm_map(text_corpus, removePunctuation) #remove punctuation
text_corpus <- tm_map(text_corpus, removeWords, stopwords('english')) #remove commonly used words that dont add meaning. (e.g. I, Me)
text_corpus <- tm_map(text_corpus, stemDocument) #Turn words into their stems (e.g. Running -> Run)
dtm <- DocumentTermMatrix(corpus)
dtm <- DocumentTermMatrix(text_corpus)
dtm2 <- as.matrix(dtm)
frequency <- colSums(dtm2)
head(frequency)
frequency <- sort(frequency, decreasing=TRUE)
head(frequency)
wordcloud(text_corpus, max.words = 100, random.order = FALSE)
as.data.frame(t(frequency))
freq_df <- as.data.frame(t(frequency))
View(freq_df)
freq_df <- as.data.frame(frequency)
freq_df <- t(freq_df)
View(freq_df)
freq_df <- data.frame("word" = colnames(freq_df_wide), "freq" = freq_df_wide[,1])
freq_df_wide <- as.data.frame(frequency)
freq_df <- data.frame("word" = colnames(freq_df_wide), "freq" = freq_df_wide[,1])
View(freq_df)
colnames(freq_df_wide)
rownames(freq_df_wide)
freq_df_wide
freq_df_wide <- as.data.frame(frequency)
View(freq_df_wide)
dtm       <- DocumentTermMatrix(text_corpus)
dtm2      <- as.matrix(dtm)
frequency <- colSums(dtm2)
frequency <- sort(frequency, decreasing=TRUE)
freq_df <- as.data.frame(frequency)
freq_df$word <-  rownames(freq_df)
head(freq_df)
ggplot(freq_df, aes(x = word, y = freq)) + geom_bar(stat = "identity")
ggplot(freq_df, aes(x = word, y = frequency)) + geom_bar(stat = "identity")
ggplot(freq_df[1:100,], aes(x = word, y = frequency)) + geom_bar(stat = "identity")
frequency <- sort(frequency, decreasing=TRUE)
#transform into a tidy dataframe like ggplot desires.
freq_df <- as.data.frame(frequency)
freq_df$word <-  rownames(freq_df)
ggplot(freq_df[1:100,], aes(x = word, y = frequency)) + geom_bar(stat = "identity")
freq_df <- freq_df[order(freq_df$frequency)]
View(freq_df)
ggplot(freq_df[1:100,], aes(x = word, y = frequency)) + geom_bar(stat = "identity")
freq_df$frequency <- factorfreq_df$frequency, levels=unique(as.character(freq_df$frequency)) )
freq_df$frequency <- factor(freq_df$frequency, levels=unique(as.character(freq_df$frequency)) )
ggplot(freq_df[1:100,], aes(x = word, y = frequency)) + geom_bar(stat = "identity")
ggplot(freq_df[1:10,], aes(x = word, y = frequency)) + geom_bar(stat = "identity")
ggplot(freq_df[1:10,], aes(x = reorder(word, frequency), y = frequency)) + geom_bar(stat = "identity")
dtm       <- DocumentTermMatrix(text_corpus)
dtm2      <- as.matrix(dtm)
frequency <- colSums(dtm2)
frequency <- sort(frequency, decreasing=TRUE)
#transform into a tidy dataframe like ggplot desires.
freq_df <- as.data.frame(frequency)
freq_df$word <-  rownames(freq_df)
ggplot(freq_df[1:10,], aes(x = reorder(word, frequency), y = frequency)) + geom_bar(stat = "identity")
ggplot(freq_df[1:10,], aes(x = reorder(word, -frequency), y = frequency)) + geom_bar(stat = "identity")
ggplot(freq_df[1:20,], aes(x = reorder(word, -frequency), y = frequency)) + geom_bar(stat = "identity")
ggplot(freq_df[1:20,], aes(x = reorder(word, -frequency), y = frequency)) + #sort the data so ggplot respects the dataframe order
geom_bar(stat = "identity") +  #use a barchart
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # rotate the text 90 degrees so we can actually read the words
ggplot(freq_df[1:40,], aes(x = reorder(word, -frequency), y = frequency)) + #sort the data so ggplot respects the dataframe order
geom_bar(stat = "identity") +  #use a barchart
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # rotate the text 90 degrees so we can actually read the words
theme(axis.text.x = element_text(angle = 70, hjust = 1)) # rotate the text 90 degrees so we can actually read the words
ggplot(freq_df[1:40,], aes(x = reorder(word, -frequency), y = frequency)) + #sort the data so ggplot respects the dataframe order
geom_bar(stat = "identity") +  #use a barchart
theme(axis.text.x = element_text(angle = 70, hjust = 1)) # rotate the text 90 degrees so we can actually read the words
theme(axis.text.x = element_text(angle = 60, hjust = 1)) # rotate the text so we can actually read the words
ggplot(freq_df[1:40,], aes(x = reorder(word, -frequency), y = frequency)) + #sort the data so ggplot respects the dataframe order
geom_bar(stat = "identity") +  #use a barchart
theme(axis.text.x = element_text(angle = 60, hjust = 1)) # rotate the text so we can actually read the words
ggplot(freq_df[1:40,], aes(x = reorder(word, -frequency), y = frequency)) + #sort the data so ggplot respects the dataframe order
geom_bar(stat = "identity") +  #use a barchart
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # rotate the text so we can actually read the words
ggplot(freq_df[1:40,], aes(x = reorder(word, -frequency), y = frequency)) + #sort the data so ggplot respects the dataframe order
geom_bar(stat = "identity") +  #use a barchart
theme(axis.text.x = element_text(angle = 40, hjust = 1)) # rotate the text so we can actually read the words
ggplot(freq_df[1:40,], aes(x = reorder(word, -frequency), y = frequency)) + #sort the data so ggplot respects the dataframe order
geom_bar(stat = "identity") +  labs(x = "Word") + #use a barchart and label the xaxis
theme(axis.text.x = element_text(angle = 40, hjust = 1)) # rotate the text so we can actually read the words
wordcloud(text_corpus, max.words = 40, random.order = FALSE)
ggplot(freq_df[1:40,], aes(x = reorder(word, -frequency), y = frequency)) + #sort the data so ggplot respects the dataframe order
geom_bar(stat = "identity") +  labs(x = "Word") + #use a barchart and label the xaxis
theme(axis.text.x = element_text(angle = 40, hjust = 1)) # rotate the text so we can actually read the words
ggplot(data, aes(x = date, y = deaths)) + geom_bar(stat = "identity")
data = data.frame("date": c("2010", "2011", "2012", "2013"),
"deaths": c(400,   425,    430,    440  ) )
ggplot(data, aes(x = date, y = deaths)) + geom_bar(stat = "identity")
data = data.frame("date": c("2010", "2011", "2012", "2013"),
"deaths": c(400,   425,    430,    440  ) )
data = data.frame("date"  = c("2010", "2011", "2012", "2013"),
"deaths"= c( 400,    425,    430,    440  ))
```
ggplot(data, aes(x = date, y = deaths)) + geom_bar(stat = "identity")
ggplot(data, aes(x = date, y = deaths)) + geom_bar(stat = "identity") + xlim(c(380, 450))
ggplot(data, aes(x = date, y = deaths)) + geom_bar(stat = "identity") + ylim(c(380, 450))
ggplot(data, aes(x = date, y = deaths)) + geom_bar(stat = "identity") + ylim(c(380, 450))
ggplot(data, aes(x = date, y = deaths)) + geom_bar(stat = "identity")
ggplot(data, aes(x = date, y = deaths)) + geom_bar(stat = "identity") + scale_y_continuous(limits = c(380, 450))
ggplot(data, aes(x = date, y = deaths)) + geom_bar(stat = "identity") + ylim(380, 450)
ggplot(data, aes(x = date, y = deaths)) + geom_line() + ylim(380, 450)
data = data.frame("date"  = c("2010", "2011", "2012", "2013"),
"deaths"= c( 400,    425,    430,    440  ))
ggplot(data, aes(x = date, y = deaths)) + geom_line()
data = data.frame("date"  = c(2010, 2011, 2012, 2013),
"deaths"= c(400,  425,   430,  440))
ggplot(data, aes(x = date, y = deaths)) + geom_line()
ggplot(data, aes(x = date, y = deaths)) + geom_bar(stat = "identity")
ggplot(data, aes(x = date, y = deaths)) + geom_line()
ggplot(data, aes(x = date, y = deaths)) + geom_line() + ylim(0,450)
ggplot(data, aes(x = date, y = deaths)) + geom_line() + theme_classic()
ggplot(data, aes(x = date, y = deaths)) + geom_line() + theme_bw()
plot <- ggplot(data, aes(x = date, y = deaths)) + geom_line() + theme_bw()
plot
plot <- ggplot(data, aes(x = date, y = deaths)) + geom_line() + theme_bw() + labs(title = "Hospital Deaths from 2010-2013")
plot
plot + ylim(0,450)
letters
line_data <- data.frame(x = 1:250)
for (letter in letters){
line_data[,letter] <- (x * rnorm(1)) + rnorm(100)
}
for (letter in letters){
line_data[,letter] <- (line_data$x * rnorm(1)) + rnorm(100)
}
warnings()
for (letter in letters){
slope <- rnorm(1) #random slope
line_data[,letter] <- slope * line_data$x + rnorm(100)
}
for (letter in letters){
slope <- rnorm(1) #random slope
line_data[,letter] <- slope * line_data$x + rnorm(250)
}
View(line_data)
library(reshape2)
tidy_lines = melt(line_data)
View(tidy_lines)
tidy_lines = melt(line_data, id = "x")
View(tidy_lines)
ggplot(tidy_lines, aes(x = x, y = value, color = variable)) + geom_line()
line_data <- data.frame(x = 1:250)
View(line_data)
for (letter in letters){
line_data[,letter] <- sin(line_data$x) + rnorm(250)
}
tidy_lines = melt(line_data, id = "x")
ggplot(tidy_lines, aes(x = x, y = value, color = variable)) + geom_line()
View(line_data)
library(reshape2)
line_data <- data.frame(x_val = 1:250)
for (letter in letters){
line_data[,letter] <- sin(line_data$x_val) + rnorm(250)
}
#melt the big dataframe to a tidy one.
tidy_lines = melt(line_data, id = "x_val")
ggplot(tidy_lines, aes(x = x_val, y = value, color = variable)) + geom_line()
library(reshape2)
line_data <- data.frame(x_val = 1:250)
for (letter in letters){
line_data[,letter] <- sin(line_data$x_val + rnorm(1)) + rnorm(250)
}
#melt the big dataframe to a tidy one.
tidy_lines = melt(line_data, id = "x_val")
ggplot(tidy_lines, aes(x = x_val, y = value, color = variable)) + geom_line()
ggplot(tidy_lines, aes(x = x_val, y = value) + geom_line() + facet_grid(variable)
ggplot(tidy_lines, aes(x = x_val, y = value) + geom_line() + facet_grid(variable)
ggplot(tidy_lines, aes(x = x_val, y = value)) + geom_line() + facet_grid(variable)
ggplot(tidy_lines, aes(x = x_val, y = value)) + geom_line() + facet_grid(~variable)
ggplot(tidy_lines, aes(x = x_val, y = value)) + geom_line() + facet_wrap(~variable)
library(reshape2)
line_data <- data.frame(x_val = 1:50)
for (letter in letters){
line_data[,letter] <- sin(line_data$x_val + rnorm(1)) + rnorm(50)
}
#melt the big dataframe to a tidy one.
tidy_lines = melt(line_data, id = "x_val")
ggplot(tidy_lines, aes(x = x_val, y = value, color = variable)) + geom_line()
ggplot(tidy_lines, aes(x = x_val, y = value)) + geom_line() + facet_wrap(~variable)
library(reshape2)
line_data <- data.frame(x_val = 1:50)
for (letter in letters){
slope = rnorm(1)
line_data[,letter] <- sin(line_data$x_val + rnorm(1))*slope + rnorm(50)
}
#melt the big dataframe to a tidy one.
tidy_lines = melt(line_data, id = "x_val")
ggplot(tidy_lines, aes(x = x_val, y = value, color = variable)) + geom_line()
ggplot(tidy_lines, aes(x = x_val, y = value)) + geom_line() + facet_wrap(~variable)
ggplot(tidy_lines, aes(x = x_val, y = value, color = variable)) + geom_line()
line_data$highlight <- line_data$x_val == 42
#melt the big dataframe to a tidy one.
tidy_lines = melt(line_data, id = "x_val")
#plot with different lines for different letters.
ggplot(tidy_lines, aes(x = x_val, y = value, color = variable)) + geom_line() + lab(title = "Delicious data spagetti")
ggplot(tidy_lines, aes(x = x_val, y = value, color = variable)) + geom_line() + labs(title = "Delicious data spagetti")
line_data <- data.frame(x_val = 1:50)
for (letter in letters){
slope = rnorm(1)
line_data[,letter] <- sin(line_data$x_val + rnorm(1))*slope + rnorm(50)
}
#add in a selected line choice for later example, ignore this on first pass!
#line_data$highlight <- line_data$x_val == 42
#melt the big dataframe to a tidy one.
tidy_lines = melt(line_data, id = "x_val")
#plot with different lines for different letters.
ggplot(tidy_lines, aes(x = x_val, y = value, color = variable)) + geom_line() + labs(title = "Delicious data spagetti")
library(reshape2)
line_data <- data.frame(x_val = 1:50)
for (letter in letters){
slope = rnorm(1)
line_data[,letter] <- sin(line_data$x_val + rnorm(1))*slope + rnorm(50)
}
#add in a selected line choice for later example, ignore this on first pass!
line_data$highlight <- line_data$x_val == 42
#melt the big dataframe to a tidy one.
tidy_lines = melt(line_data, id = "x_val")
#plot with different lines for different letters.
ggplot(tidy_lines, aes(x = x_val, y = value, color = variable)) + geom_line() + labs(title = "Delicious data spagetti")
tidy_lines = melt(line_data, id = c("x_val", "highlight"))
#plot with different lines for different letters.
ggplot(tidy_lines, aes(x = x_val, y = value, color = variable)) + geom_line() + labs(title = "Delicious data spagetti")
ggplot(tidy_lines, aes(x = x_val, y = value)) + geom_line() + facet_wrap(~variable) + labs(title = "Small multiple lines")
View(tidy_lines)
ggplot(tidy_lines, aes(x = x_val, y = value, group = variable, color = highlight)) + geom_line() + labs(title = "Delicious data spagetti")
library(reshape2)
line_data <- data.frame(x_val = 1:50)
for (letter in letters){
slope = rnorm(1)
line_data[,letter] <- sin(line_data$x_val + rnorm(1))*slope + rnorm(50)
}
#melt the big dataframe to a tidy one.
tidy_lines = melt(line_data, id = c("x_val"))
tidy_lines$highlight = tidy_lines$variable == "v"
ggplot(tidy_lines, aes(x = x_val, y = value, group = variable, color = highlight)) + geom_line() + labs(title = "Delicious data spagetti")
subset(tidy_lines, variable = "z")
test = subset(tidy_lines, variable = "z")
View(test)
test = tidy_lines[tidy_lines$variable == "z", ]
View(test)
z_line <- tidy_lines[tidy_lines$variable == "z", ]
plot <- ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable, color = highlight)) +
labs(title = "Highlighted line") +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable, color = "steelblue"))
#melt the big dataframe to a tidy one.
tidy_lines = melt(line_data, id = c("x_val"))
# cut our dataframe down to just the line we want to show:
z_line <- tidy_lines[tidy_lines$variable == "z", ]
plot <- ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable)) +
labs(title = "Highlighted line") +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable, color = "steelblue"))
plot <- ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable),color = "grey", alpha = 0.5) +
labs(title = "Highlighted line") +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable, color = "steelblue"))
plot
ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable),color = "grey", alpha = 0.7) +
labs(title = "Highlighted line") +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable, color = "steelblue"))
ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable),color = "grey", alpha = 0.7) +
labs(title = "Highlighted line") +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable, color = "red"))
ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable),color = "grey", alpha = 0.7) +
labs(title = "Highlighted line") +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable, color = "red")) +
guides(fill=guide_legend(title=NULL)) #remove the legend
ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable),color = "grey", alpha = 0.7) +
labs(title = "Highlighted line") +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable, color = "red")) +
theme(legend.title=element_blank()) #remove the legend
ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable),color = "grey", alpha = 0.7) +
labs(title = "Highlighted line") +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable, color = "red")) +
scale_fill_discrete(name="",labels=c("z"))
ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable),color = "grey", alpha = 0.7) +
labs(title = "Highlighted line") +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable, color = "z")) +
scale_fill_manual(values=c("steelblue"),
name="Experimental\nCondition",
breaks=c("z"),
labels=c("z"))
ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable),color = "grey", alpha = 0.7) +
labs(title = "Highlighted line") +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable, color = "z"))
ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable),color = "grey", alpha = 0.7) +
labs(title = "Highlighted line") + theme(legend.title=element_blank()) +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable, color = "z"))
ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable),color = "grey", alpha = 0.7) +
labs(title = "Highlighted line") + theme(legend.title=element_blank()) +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable), color = "steelblue")
ggplot(tidy_lines) + geom_line(aes(x = x_val, y = value, group = variable),color = "grey", alpha = 0.7) +
labs(title = "Highlighted line") +
geom_line(data = z_line, aes(x = x_val, y = value, group = variable), color = "steelblue")
data = data.frame(student = c("Tina", "Trish", "Kevin", "Rebecca", "Nick"),
seminar_attendence = c(25, 95, 54, 70, 100) ) ) #attendence in percent
data = data.frame(student = c("Tina", "Trish", "Kevin", "Rebecca", "Nick"),
seminar_attendence = c(25, 95, 54, 70, 100)  ) #attendence in percent
plot = ggplot(data, aes(x = student, y = seminar_atatendence))
plot + geom_bar(stat = "identity")
plot = ggplot(data, aes(x = student, y = seminar_attendence))
plot + geom_bar(stat = "identity")
plot + geom_pointrange(aes(ymin = 0, ymax = 100))
plot + geom_pointrange(aes(ymin = 0, ymax = 100)) + coord_flip()
data = data.frame(student = c("Tina", "Trish", "Kevin", "Rebecca", "Nick"),
percentile = c(25, 95, 54, 70, 100)  ) #attendence in percent
plot = ggplot(data, aes(x = student, y = seminar_attendence))
plot + geom_bar(stat = "identity")
plot + geom_pointrange(aes(ymin = 0, ymax = 100)) + coord_flip() # Hacking the geom_pointrange a bit so that the lines are the whole width.
data = data.frame(student = c("Tina", "Trish", "Kevin", "Rebecca", "Nick"),
percentile = c(25, 95, 54, 70, 100)  ) #attendence in percent
plot = ggplot(data, aes(x = student, y = percentile))
plot + geom_bar(stat = "identity")
plot + geom_pointrange(aes(ymin = 0, ymax = 100)) + coord_flip() # Hacking the geom_pointrange a bit so that the lines are the whole width.
plot + geom_bar(stat = "identity")
?plot
library(plotly, quietly = TRUE)
x <- rnorm(20)
#Function for likelihood
normalLikelihood <- function(x, mu, sigma_2){
n <- length(x)
( (2 * pi * sigma_2)^(-n/2) ) * exp( (-1/(2*sigma_2)) * sum( (x - mu)^2 ))
}
#values to loop over.
mus = seq(mean(x) - 1.5,mean(x) + 1.5, length.out = 500)
sigma_2s = seq(0.001, var(x) + 1.5, length.out = 500)
#how to find where you are on the matrix for grabbing of values.
mu_pos      <- function(i, length){ ( (i-1) %% length ) + 1 }
sigma_2_pos <- function(i, length){ floor((i-1)/length) + 1}
#need how many mus we are looking at.
muLength = length(mus)
likelihoodMat = function(i){
mu      = mus[mu_pos(i, muLength)]
sigma_2 = sigma_2s[sigma_2_pos(i, muLength)]
normalLikelihood(x, mu, sigma_2)
}
#generate the position itterator.
pos = 1: (length(mus)*length(sigma_2s))
results <- sapply(pos, likelihoodMat)
#normalize
newRes = results/max(results)
#make it into a matrix
resMat = matrix(newRes, nrow = muLength)
colnames(resMat) = sigma_2s
rownames(resMat) = mus
plot_ly(z = resMat, type = "surface")
install.packages("plotly")
library(plotly, quietly = TRUE)
x <- rnorm(20)
#Function for likelihood
normalLikelihood <- function(x, mu, sigma_2){
n <- length(x)
( (2 * pi * sigma_2)^(-n/2) ) * exp( (-1/(2*sigma_2)) * sum( (x - mu)^2 ))
}
#values to loop over.
mus = seq(mean(x) - 1.5,mean(x) + 1.5, length.out = 500)
sigma_2s = seq(0.001, var(x) + 1.5, length.out = 500)
#how to find where you are on the matrix for grabbing of values.
mu_pos      <- function(i, length){ ( (i-1) %% length ) + 1 }
sigma_2_pos <- function(i, length){ floor((i-1)/length) + 1}
#need how many mus we are looking at.
muLength = length(mus)
likelihoodMat = function(i){
mu      = mus[mu_pos(i, muLength)]
sigma_2 = sigma_2s[sigma_2_pos(i, muLength)]
normalLikelihood(x, mu, sigma_2)
}
#generate the position itterator.
pos = 1: (length(mus)*length(sigma_2s))
results <- sapply(pos, likelihoodMat)
#normalize
newRes = results/max(results)
#make it into a matrix
resMat = matrix(newRes, nrow = muLength)
colnames(resMat) = sigma_2s
rownames(resMat) = mus
plot_ly(z = resMat, type = "surface")
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
d <- diamonds[sample(nrow(diamonds), 1000), ]
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
d <- diamonds[sample(nrow(diamonds), 1000), ]
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 2) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
library(devtools)
install.packages("devtools")
install_github("nstrayer/D3ManhattanPlots")
library(devtools)
install_github("nstrayer/D3ManhattanPlots")
#Load in package data to test.
d = sampleVals
library(D3ManhattanPlot)
library(manhattanPlot) #no idea why I named it different than the repo name
d = sampleVals
manhattanPlot(d)
library(ggpairs)
install.packages("ggpairs")
library(GGally)
install.packages("GGally")
library(GGally)
data(tips, package = "reshape")
pm <- ggpairs(tips, columns = c(1, 6, 2))
suppressMessages(print(pm))
View(tips)
pm <- ggpairs(tips, columns = c(1, 6, 2, 3))
# we have to supress some dumb binwidth warnings that we cant fix because this is a wrapper function.
suppressMessages(print(pm))
